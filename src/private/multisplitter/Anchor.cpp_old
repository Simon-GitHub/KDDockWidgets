/*
  This file is part of KDDockWidgets.

  Copyright (C) 2018-2020 Klarälvdalens Datakonsult AB, a KDAB Group company, info@kdab.com
  Author: Sérgio Martins <sergio.martins@kdab.com>

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


bool Anchor::s_isResizing = false;

Anchor::Anchor(Qt::Orientation orientation, MultiSplitterLayout *multiSplitter, Type type)
    : QObject(multiSplitter->multiSplitter())
    , m_orientation(orientation)
    , m_type(type)
    , m_layout(multiSplitter)
    , m_lazyResize(Config::self().flags() & Config::Flag_LazyResize)
    , m_lazyResizeRubberBand(m_lazyResize ? new QRubberBand(QRubberBand::Line, multiSplitter->multiSplitter()) : nullptr)
{
}

void Anchor::updateItemSizes()
{
    if (!m_initialized) {
        // setPosition() hasn't been called yet, don't bother
        return;
    }

    if (LayoutSaver::restoreInProgress()) {
        // Nothing to do. The LayoutSaver is setting up the whole layout.
        return;
    }

    qCDebug(anchors) << Q_FUNC_INFO << this << "; o=" << orientation();

    int position = this->position() + m_positionOffset;
    for (Item *item : qAsConst(m_side2Items)) {
        QRect geo = item->geometry();

        const QPoint topLeft = isVertical() ? QPoint(position + thickness(), item->y())
                                            : QPoint(item->x(), position + thickness());

        geo.setTopLeft(topLeft);
        if (!item->isPlaceholder())
            item->setGeometry(geo);
    }

    position = this->position() - m_positionOffset;

    for (Item *item : qAsConst(m_side1Items)) {
        QRect geo = item->geometry();

        // -1 as the widget is right next to the anchor, and not on top
        const QPoint bottomRight = isVertical() ? QPoint(position - 1, geo.bottom())
                                                : QPoint(geo.right(), position - 1);
        geo.setBottomRight(bottomRight);
        if (!item->isPlaceholder()) {
            item->setGeometry(geo);
        }
    }
}



void Anchor::ensureBounded()
{
    // TODO: Probably delete this unused method. It was used in the old days before discovering it
    // was flawed: Separators being in between bounds doesn't imply that all min sizes are being
    // Honoured. Use MultiSplitterLayout::ensureItemsMinSize() instead
    if (!isStatic() && !isFollowing()) {
        const QPair<int,int> bounds = m_layout->boundPositionsForAnchor(this);

        if (position() < bounds.first) {
            setPosition(bounds.first);
        } else if (position() > bounds.second) {
            setPosition(bounds.second);
        }
    }

    for (Item *item : items(Side2)) {
        item->anchorAtSide(Side2, orientation())->ensureBounded();
    }
}

bool Anchor::isStaticOrFollowsStatic() const
{
    if (isStatic())
        return true;

    return m_followee && m_followee->isStaticOrFollowsStatic();
}

void Anchor::setPositionOffset(int value)
{
    if (value != m_positionOffset) {
        m_positionOffset = value;
        updateItemSizes();
    }
}

bool Anchor::isBeingDragged() const
{
    return m_layout->anchorBeingDragged() == this;
}

void Anchor::setFollowee(Anchor *followee)
{
    Q_ASSERT(this != followee);
    if (m_followee == followee)
        return;

    qCDebug(placeholder) << Q_FUNC_INFO << "follower="
                         << this << "; followee=" << followee;

    if (m_followee) {
        disconnect(m_followee, &Anchor::positionChanged, this, &Anchor::onFolloweePositionChanged);
        disconnect(m_followee, &Anchor::thicknessChanged, this, &Anchor::setThickness);
        disconnect(m_followeeDestroyedConnection);
    }

    m_followee = followee;
    setThickness();
    if (m_followee) {
        Q_ASSERT(orientation() == m_followee->orientation());
        setVisible(false);
        setPosition(m_followee->position());
        connect(m_followee, &Anchor::positionChanged, this, &Anchor::onFolloweePositionChanged);
        connect(m_followee, &Anchor::thicknessChanged, this, &Anchor::setThickness);
        m_followeeDestroyedConnection = connect(m_followee, &QObject::destroyed, this, [this] {
            setFollowee(nullptr);
        });


    } else {
        setVisible(true);
    }

    Q_EMIT followeeChanged();
}

const Anchor::List Anchor::followers() const
{
    Anchor::List result;
    for (Anchor *a : m_layout->anchors()) {
        if (a->followee() == this)
            result.push_back(a);
    }

    return result;
}

Anchor *Anchor::endFollowee() const
{
    Anchor *a = m_followee;
    while (a) {
        if (!a->followee())
            return a;

        a = a->followee();
    }

    return nullptr;
}

bool Anchor::findAnchor(Anchor *anchor, Anchor::Side side) const
{
    if (!anchor)
        return false;

    Q_ASSERT(anchor != this);
    Q_ASSERT(anchor->orientation() == orientation());

    for (Item *item : items(side)) {
        Anchor *a = item->anchorAtSide(side, orientation());
        if (anchor == a)
            return true;

        if (a->findAnchor(anchor, side))
            return true;
    }

    return false;
}

Anchor *Anchor::findNearestAnchorWithItems(Anchor::Side side) const
{
    Anchor *candidate = nullptr;
    for (Item *item : items(side)) {
        Anchor *a = item->anchorAtSide(side, orientation());
        if (!a->hasNonPlaceholderItems(side))
            a = a->findNearestAnchorWithItems(side);

        if (!candidate || (side == Side1 && a->position() > candidate->position()) || (side == Side2 && a->position() < candidate->position()) ) {
            candidate = a;
        }
    }

    if (!candidate)
        candidate = m_layout->staticAnchor(side, orientation());

    Q_ASSERT(candidate->isStatic() || candidate->hasNonPlaceholderItems(side));
    return candidate;
}

void Anchor::onFolloweePositionChanged(int pos)
{
    Q_ASSERT(isFollowing());
    setPosition(pos);
}

void Anchor::setLayout(MultiSplitterLayout *layout)
{
    m_layout->removeAnchor(this);
    m_layout = layout;
    setParent(layout->multiSplitter());
    m_separatorWidget->setParent(layout->multiSplitter());
    m_layout->insertAnchor(this);
    m_layout->setAnchorBeingDragged(nullptr);
}

void Anchor::setLazyPosition(int pos)
{
    if (m_lazyPosition != pos) {
        m_lazyPosition = pos;

        QRect geo = m_separatorWidget->geometry();
        if (isVertical()) {
            geo.moveLeft(pos);
        } else {
            geo.moveTop(pos);
        }

        m_lazyResizeRubberBand->setGeometry(geo);
    }
}

int Anchor::position(QPoint p) const
{
    return isVertical() ? p.x() : p.y();
}


Anchor::Side Anchor::oppositeSide(Side side)
{
    switch (side) {
    case Side1:
        return Side2;
    case Side2:
        return Side1;
    default:
        Q_ASSERT(false);
        return Side_None;
    }
}

void Anchor::onMousePress()
{
    s_isResizing = true;
    m_layout->setAnchorBeingDragged(this);
    qCDebug(anchors) << "Drag started";

    if (m_lazyResize) {
        setLazyPosition(position());
        m_lazyResizeRubberBand->show();
    }
}

void Anchor::onMouseReleased()
{
    if (m_lazyResize) {
        m_lazyResizeRubberBand->hide();
        setPosition(m_lazyPosition);
    }

    s_isResizing = false;
    m_layout->setAnchorBeingDragged(nullptr);
}

void Anchor::onMouseMoved(QPoint pt)
{
    if (!isBeingDragged() || isStatic())
        return;

    if (!(qApp->mouseButtons() & Qt::LeftButton)) {
        qCDebug(mouseevents) << Q_FUNC_INFO << "Ignoring spurious mouse event. Someone ate our ReleaseEvent";
        onMouseReleased();
        return;
    }

#ifdef Q_OS_WIN
    // Try harder, Qt can be wrong, if mixed with MFC
    const bool mouseButtonIsReallyDown = (GetKeyState(VK_LBUTTON) & 0x8000) || (GetKeyState(VK_RBUTTON) & 0x8000);
    if (!mouseButtonIsReallyDown) {
        qCDebug(mouseevents) << Q_FUNC_INFO << "Ignoring spurious mouse event. Someone ate our ReleaseEvent";
        onMouseReleased();
        return;
    }
#endif

    const int positionToGoTo = position(pt);
    auto bounds = m_layout->boundPositionsForAnchor(this);

    if (positionToGoTo < bounds.first || positionToGoTo > bounds.second) {
        // qDebug() << "Out of bounds" << bounds.first << bounds.second << positionToGoTo << "; currentPos" << position() << "; window size" << window()->size();
        return;
    }

    m_lastMoveDirection = positionToGoTo < position() ? Side1
                                                      : (positionToGoTo > position() ? Side2
                                                                                     : Side_None); // Side_None shouldn't happen though.

    if (m_lazyResize)
        setLazyPosition(positionToGoTo);
    else
        setPosition(positionToGoTo);
}

void Anchor::onWidgetMoved(int p)
{
    if (m_layout->anchorBeingDragged() != this) // We only care if it's being dragged by mouse
        return;


    setPosition(p);
}

bool Anchor::isResizing()
{
    return s_isResizing;
}


Anchor *Anchor::deserialize(const LayoutSaver::Anchor &a, MultiSplitterLayout *layout)
{
    auto anchor = new Anchor(Qt::Orientation(a.orientation), layout, Anchor::Type(a.type));
    anchor->setObjectName(a.objectName);
    anchor->setGeometry(a.geometry);
    anchor->m_positionPercentage = a.positionPercentage;

    anchor->setProperty("indexFrom", a.indexOfFrom);
    anchor->setProperty("indexTo", a.indexOfTo);
    anchor->setProperty("indexFolowee", a.indexOfFollowee);

    ItemList side1Items;
    ItemList side2Items;
    const ItemList allItems = layout->items();
    side1Items.reserve(a.side1Items.size());
    for (int index : qAsConst(a.side1Items)) {
        side1Items.push_back(allItems.at(index));
    }
    side2Items.reserve(a.side2Items.size());
    for (int index : qAsConst(a.side2Items)) {
        side2Items.push_back(allItems.at(index));
    }

    anchor->m_side1Items = side1Items;
    anchor->m_side2Items = side2Items;
    anchor->m_initialized = true;

    return anchor;
}

LayoutSaver::Anchor Anchor::serialize() const
{
    LayoutSaver::Anchor a;
    const Anchor::List allAnchors = m_layout->anchors();
    const ItemList allItems = m_layout->items();

    a.objectName = objectName();
    a.type = type();
    a.geometry = geometry();
    a.orientation = orientation();
    a.indexOfFrom = allAnchors.indexOf(from());
    a.indexOfTo = allAnchors.indexOf(to());
    a.indexOfFollowee = followee() ? allAnchors.indexOf(followee()) : -1;
    a.positionPercentage = m_positionPercentage;

    a.side1Items.clear();
    a.side1Items.reserve(this->side1Items().size());
    for (Item *item : this->side1Items())
        a.side1Items.push_back(allItems.indexOf(item));

    a.side2Items.clear();
    a.side2Items.reserve(this->side2Items().size());
    for (Item *item : this->side2Items())
        a.side2Items.push_back(allItems.indexOf(item));

    return a;
}
