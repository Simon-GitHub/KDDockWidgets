/*
  This file is part of KDDockWidgets.

  Copyright (C) 2018-2020 Klarälvdalens Datakonsult AB, a KDAB Group company, info@kdab.com
  Author: Sérgio Martins <sergio.martins@kdab.com>

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licensetases/>.
*/


namespace KDDockWidgets {


struct DOCKS_EXPORT_FOR_UNIT_TESTS AnchorGroup
{
    void removeItem(Item *item);

    ///@brief returns whether this group contains @p anchor
    bool containsAnchor(Anchor *anchor) const;

    ///@brief returns whether this group contains @p anchor at Side @p side
    ///If side is Side1, then anchor must be equal to left or top, otherwise top or bottom
    bool containsAnchor(Anchor *anchor, Anchor::Side side) const;

    /**
     * @brief Returns the max available size in this group
     * This is the size of the widget when you push all anchors outwards
     */
    QSize availableSize() const;


    /**
     * @brief Returns whether @ref availableSize is bigger or equal than @ref needed
     */
    bool hasAvailableSizeFor(QSize needed, Qt::Orientation orientation) const;

    /// Returns the group formed by the Anchors that actually have items on their outter side
    AnchorGroup outterGroup() const;

    Anchor *createAnchorFrom(KDDockWidgets::Location fromAnchorLocation, Item *relativeTo);

    Anchor *adjacentAnchor(Anchor*) const;

    QPair<Anchor*,Anchor*> adjacentAnchors(Anchor*) const;

    Anchor *anchorAtDirection(Anchor::Side side, Qt::Orientation orientation) const;


    bool anchorIsFollowingInwards(Anchor*) const;
    const Anchor::List anchorsFollowingInwards() const;
    const Anchor::List anchorsNotFollowingInwards() const;
    const Anchor::List anchors() const;

    Anchor::Side sideForAnchor(Anchor*) const;
    bool isStaticOrFollowsStatic() const;

    void updateItemSizes();

};
}

inline QDebug operator<< (QDebug d, KDDockWidgets::AnchorGroup *group)
{
    // out-of-line as it needs to include MultiSplitterLayout
    return group->debug(d);
}

#endif
